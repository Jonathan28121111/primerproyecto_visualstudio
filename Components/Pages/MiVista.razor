@page "/mivista"
@using primerproyecto.Components.Data
@inject Servicio.ServicioControlador ServicioControlador
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<h3>Juegos</h3>

<div style="margin-bottom: 20px;">
    <label>
        <input type="checkbox" checked="@TodosJugados" @onchange="CambiarTodosJugados" />
        ¿Ya jugaste todos estos juegos?
    </label>
</div>

<div style="margin-bottom: 20px;">
    <label>
        <input type="checkbox" checked="@VerSoloNoJugados" @onchange="CambiarFiltroNoJugados" />
        Ver solamente los no jugados
    </label>
</div>

<ul>
    @foreach (var j in JuegosFiltrados)
    {
        <li>
            @j.Nombre
            @(j.Jugado ? "Ya jugado" : "Pendiente")
            <input type="checkbox" checked="@j.Jugado" @onclick=" ()=> CambiarJugado(j)" />
            <button @onclick="() => EliminarJuego(j)">Eliminar</button>
        </li>
    }
</ul>

<div>
    <input @bind="newJuego.Nombre" placeholder="Agregar Juego" />
    <button @onclick="AgregarJuego"> AgregarJuego </button>

</div>

@code {
    private List<Juego> juegos = new();
    private Juego newJuego = new();
    private bool VerSoloNoJugados = false;

    private bool TodosJugados => juegos.Any() && juegos.All(j => j.Jugado);

    private List<Juego> JuegosFiltrados
    {
        get
        {
            if (VerSoloNoJugados)
            {
                return juegos.Where(j => !j.Jugado).ToList();
            }
            return juegos;
        }
    }

    private async Task ActualizarDatos()
    {
        juegos = await ServicioControlador.ActualizarDatosDesdeServidor();
        Console.WriteLine("Datos actualizados desde el servidor");
    }

    private async Task CambiarFiltroNoJugados(ChangeEventArgs e)
    {
        VerSoloNoJugados = (bool)e.Value;
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "verSoloNoJugados", VerSoloNoJugados.ToString());
        Console.WriteLine($"Filtro guardado: {VerSoloNoJugados}");
    }

    private async Task CambiarTodosJugados(ChangeEventArgs e)
    {
        bool nuevoEstado = (bool)e.Value;
        await ServicioControlador.CambiarEstadoTodos(nuevoEstado);
        juegos = await ServicioControlador.ObtenerJuegos();
    }

    private async Task CambiarJugado(Juego juego)
    {
        await ServicioControlador.CambiarEstadoJuego(juego.Identificador);
        juegos = await ServicioControlador.ObtenerJuegos();
        Console.WriteLine("Cambiar estado jugado");
    }

    private async Task AgregarJuego()
    {
        if (!string.IsNullOrWhiteSpace(newJuego.Nombre))
        {
            await ServicioControlador.AgregarJuego(newJuego);
            juegos = await ServicioControlador.ObtenerJuegos();
            newJuego = new Juego();
        }
    }

    private async Task EliminarJuego(Juego juego)
    {
        await ServicioControlador.EliminarJuego(juego.Identificador);
        juegos = await ServicioControlador.ObtenerJuegos();
        Console.WriteLine($"Juego {juego.Nombre} eliminado");
    }

    protected override async Task OnInitializedAsync()
    {
        juegos = await ServicioControlador.ObtenerJuegos();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var valorGuardado = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "verSoloNoJugados");
                if (!string.IsNullOrEmpty(valorGuardado))
                {
                    VerSoloNoJugados = bool.Parse(valorGuardado);
                    StateHasChanged();
                    Console.WriteLine($"Filtro cargado: {VerSoloNoJugados}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al cargar filtro: {ex.Message}");
            }
        }
    }
}
